/*
Copyright 2018 Pax Automa Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package steps

import (
	"archive/tar"
	"compress/gzip"
	"io"
	"io/ioutil"
	"os"
	"path"

	log "github.com/sirupsen/logrus"

	"github.com/paxautoma/operos/components/common/gatekeeper"
)

func DoUpgrade() error {
	res, err := getUpgradeInfo()
	if err != nil {
		return errors.Wrap(err, "failed to query update data from teamster")
	}

	log.Infof("upgrading to v%s", res.GetVersion())

	targetPath, err := ioutil.TempDir()
	if err != nil {
		return errors.Wrap(err, "failed to create temporary directory")
	}

	for _, url := range res.GetDownloadUrls() {
		var fileName string
		if fileName, err = downloadFile(targetPath, url); err != nil {
			return errors.Wrapf(err, "failed to download file %s", url)
		}

		if err := untarFile(targetPath, fileName); err != nil {
			return errors.Wrapf(err, "failed to untar file %s", fileName)
		}
	}
}

func getUpgradeInfo() (*gatekeeper.UpgradeCheckResp, error) {
	return nil, errors.New("unimplemented")
}

func unpackFile(targetPath, fileName string) error {
	r, err := os.Open(fileName)
	defer r.Close()
	if err != nil {
		return errors.Wrap(err, "could not open file for reading")
	}

	gzr, err := gzip.NewReader(r)
	if err != nil {
		return errors.Wrap(err, "could not read from file")
	}
	defer gzr.Close()

	tr := tar.NewReader(gzr)
	for {
		header, err := tr.Next()

		if err != nil {
			if err == io.EOF {
				return nil
			}
			return errors.Wrap(err, "failed to read valid tar data")
		}

		target := path.Join(targetPath, header.Name)

		switch header.Typeflag {
		case tar.TypeDir:
			if _, err := os.Stat(target); err != nil {
				if err := os.MkdirAll(target, 0755); err != nil {
					return errors.Wrapf(err, "failed to create directory %s", target)
				}
			}
		case tar.TypeReg:
			f, err := os.OpenFile(target, os.O_CREATE|os.O_RDWR, os.FileMode(header.Mode))
			if err != nil {
				return errors.Wrapf(err, "failed to write file %s", target)
			}
			defer f.Close()

			if _, err := io.Copy(f, tr); err != nil {
				return errors.Wrapf(err, "failed to write to file %s", target)
			}
		}
	}
}
